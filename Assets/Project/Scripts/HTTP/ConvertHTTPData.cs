using System.Collections.Generic;using System.Linq;using BestHTTP.Extensions;using Project.EntenEller.Base.Scripts.Advanced.Variables;using Project.Scripts.Map;using UnityEngine;namespace Project.Scripts.HTTP{    public static class ConvertHTTPData     {        public static MapData ConvertHTTPDataInMapData(HTTPDataMap.Data httpDatamap)        {            var mapData = new MapData();                        if (httpDatamap.map.Count > 0)            {                var mapInfo = httpDatamap.map[0];                mapData.Id = int.Parse(mapInfo.id);                mapData.Width = int.Parse(mapInfo.width);                mapData.Height = int.Parse(mapInfo.height);            }                        mapData.List = new List<BuildingData>();            foreach (var building in httpDatamap.buildings)            {                                var buildingData = new BuildingData                {                    ID = (int)ConvertStringToFloat(building.id),                    IDCar = (int)ConvertStringToFloat(building.id_car),                    IDSpawner = (int)ConvertStringToFloat(building.id_building) ,                    X = Mathf.RoundToInt(ConvertStringToFloat(building.x)),                    Y = Mathf.RoundToInt(ConvertStringToFloat(building.y)),                    Quadrant = (int)ConvertStringToFloat(building.angle),                    Number = (int)ConvertStringToFloat(building.seat_number),                    Row = (int)ConvertStringToFloat(building.seat_row),                    Additional = (int)ConvertStringToFloat(building.additional_data)                };                mapData.List.Add(buildingData);            }            return mapData;        }        public static HTTPDataMap.Data ConvertMapDataInHTTPData(MapData mapData)        {            var data = new HTTPDataMap.Data            {                map = new List<HTTPDataMap.MapInfo>                {                    new HTTPDataMap.MapInfo                    {                        id = mapData.Id.ToString(),                        width = mapData.Width.ToString(),                        height = mapData.Height.ToString()                    }                },                buildings = new List<HTTPDataMap.Building>()            };                                    foreach (var buildng in mapData.List.Select(buildingData => new HTTPDataMap.Building()            {                angle = buildingData.Quadrant.ToString(),                id_building = buildingData.IDSpawner.ToString(),                x = buildingData.X.ToString(),                y = buildingData.Y.ToString(),                seat_row = buildingData.Row.ToString(),                seat_number = buildingData.Number.ToString(),                id_car = buildingData.IDCar.ToString(),                id = buildingData.ID.ToString(),                additional_data = buildingData.Additional.ToString()            }))            {                data.buildings.Add(buildng);            }            return data;        }                private static float ConvertStringToFloat(string text)        {            return text.ParseFloat();        }    }}