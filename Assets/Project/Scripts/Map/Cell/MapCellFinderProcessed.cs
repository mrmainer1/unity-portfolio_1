using Project.EntenEller.Base.Scripts.Advanced.Behaviours.Loop;using Project.EntenEller.Base.Scripts.Patterns.Singleton;using Project.Scripts.Builder;using Project.Scripts.Builder.Builder;using UnityEngine;namespace Project.Scripts.Map.Cell{    public class MapCellFinderProcessed : EEBehaviourUpdate    {        [SerializeField] private MapCellHolder mapCellHolderRaw;        [SerializeField] private MapCellHolder mapCellHolderProcessed;        [SerializeField] private MapCellFinderByMouse mapCellFinderByMouse;        private BuilderManager builderManager;                protected override void EEAwake()        {            base.EEAwake();            builderManager = EESingleton.Get<BuilderManager>();        }        protected override void EEUpdate()        {            base.EEUpdate();            if (builderManager.CurrentBuilding == null) return;            var width =  builderManager.CurrentBuilding.Width;            var height = builderManager.CurrentBuilding.Height;                        var cell = mapCellHolderRaw.Cell;            cell.x -= width / 2;            cell.y -= height / 2;            if (mapCellFinderByMouse.CursorCellPosition.x == 1 && width != 1) cell.x += 1;            if (mapCellFinderByMouse.CursorCellPosition.y == 1) cell.y += 1;            mapCellHolderProcessed.Refresh(cell.x, cell.y);        }    }}